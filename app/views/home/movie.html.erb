<div class="container" style="padding-top: 50px;">
    <div class="row">
        <div class="col-lg-6 centered">
            <script type="text/javascript" src=<%= "http://ext.nicovideo.jp/thumb_watch/"+@id %>></script><noscript><a href= <%="http://www.nicovideo.jp/watch/"+ @id %>>nicovideo</a></noscript>
        </div>
        <div class="col-lg-6 centered">
	  <div id="chart"></div>
	  <script type="text/javascript">

    var dataset = [
    <% @comments.each do |com| %>
    <%= com['chat']['vpos'] %>,
    <% end %>
    ]
    var time_watch = [
    <% @time_watch.each do |time| %>
    <%= time %>,
    <% end %>
    ]
    var block_com_num = [
    <% @block_com_num.each do |com_num| %>
    <%= com_num %>,
    <% end %>
    ]

    var comment_max = Math.max.apply(null, block_com_num);
    var color = d3.scale.category10();  // あらかじめ用意されている色を使う
    var svgWidth = 485; // SVG領域の横幅
    var svgHeight = 300;    // SVG領域の縦幅
    var yScale = (function (height, num_max) {
                 if (height < num_max) {
                    magnification = height/num_max;
                 }
                 else {
                    magnification = 1;
                 }
                 return magnification;
                 }(svgHeight, comment_max)); // グラフの高さの倍率
    var svg = d3.select("#chart").append("svg")
        .attr("width", svgWidth).attr("height", svgHeight)
    var histogram = d3.layout.histogram()   // ヒストグラム
        .range([0, <%= @vpos_video_length %>])    //0〜20000の範囲
        .bins([0,
    <% @vpos_range.each do |vpos| %>
    <%= vpos %>,
    <% end %>
    ]); // m分割による時間幅
    svg.selectAll("rect")   // 四角形を対象にする
        .data(histogram(dataset))  // データを読み込む
        .enter()
        .append("rect") // 四角形を生成する
        .attr("x", function(d, i){  // X座標を計算
            return i * 485/<%= @m_division %> ;
        })
        .attr("y", function(d){ // Y座標を計算
            return svgHeight - d.y * yScale;
        })
        .attr("width", 485/<%= @m_division %>)  // 四角形の横幅
        .attr("height", function(d){    // 四角形の高さ
            return d.y * yScale;
        })
        .attr("fill", function(d,i){    // 色を指定する
            return color(i);    // 色を返す
              })
        .on("click", function(d,i){
            var player = document.getElementById('external_nico_0');
            player.ext_setPlayheadTime(time_watch[i]);
        });

           </script>
        </div>
    </div>
</div>


<b>分割数 : </b>
<%= @m_division %>
<br>

<b>ブロックごとのコメント数 :</b>
<% @block_com_num.each do |com_num| %>
<%= com_num %>
<% end %>

<br>
<b>ブロックごとの動画開始位置 :</b>
<% @video_time_range.each do |time_range| %>
<%= time_range %>
<% end %>
